{"version":3,"sources":["logo.svg","sortingAlgorithms/sortingAlgorithms.js","sortingAlgorithms/quickSortAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/bubbleSortAlgorithms.js","sortingAlgorithms/selectionSortAlgorithms.js","components/NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","quickSortAnimations","quickSortHelper","arr","start","end","index","pivotValue","pivotIndex","swap1","a","b","temp","swap2","partition","SortingVisualizer","props","state","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","status","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","newcolor","height","bubbleSortHelper","bubbleSort","console","log","selectionSortHelper","selectionSortAnimation","isRunning","className","Navbar","bg","expand","Brand","onClick","window","location","reload","Toggle","aria-controls","Collapse","id","Nav","Button","variant","mergeSort","quickSort","selectionSort","value","step","tooltipPlacement","size","onChange","changeEvent","target","map","idx","key","React","Component","styled","div","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a9b3e398.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/*\nexport const mergeSort = array => {\n    if(array.length === 1) return array;\n    const middleIdx = Math.floor(array.length / 2);\n    const firstHalf = mergeSort(array.slice(0, middleIdx));\n    const secondHalf = mergeSort(array.slice(middleIdx));\n    const sortedArray = [];\n\n    let i = 0, j = 0;\n    while(i < firstHalf.length && j < secondHalf.length){\n        if(firstHalf[i] < secondHalf[j]){\n            sortedArray.push(firstHalf[i++]);\n        }else{\n            sortedArray.push(secondHalf[j++]);\n        }\n    }\n    while(i < firstHalf.length)\n        sortedArray.push(firstHalf[i++]);\n    while(j < secondHalf.length)\n        sortedArray.push(secondHalf[j++]);\n    return sortedArray;\n};\n*/\n\nexport function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations, ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n        animations.push([i, j]); //Comparing values, push 1st time to change their color\n        animations.push([i, j]); //push second time to revert their color.\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            animations.push([k, auxiliaryArray[i]]); //overwrite the value at k index in the original array\n            mainArray[k++] = auxiliaryArray[i++]; // with value at i index in the aux array\n        } else {\n            animations.push([k, auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n    while (i <= middleIdx) {\n        animations.push([i, i]);\n        animations.push([i, i]);\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n        animations.push([j, j]);\n        animations.push([j, j]);\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n    }\n}","let values = [];\nlet w = 10;\n\nlet states = [];\n\nexport function quickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  quickSortHelper(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction quickSortHelper(arr, start, end, animations) {\n  if (start >= end) {\n    //      animations.push([true, start]);\n    return;\n  }\n  let index = partition(arr, start, end, animations);\n\n  quickSortHelper(arr, start, index - 1, animations);\n  quickSortHelper(arr, index + 1, end, animations);\n}\n\nfunction partition(arr, start, end, animations) {\n  /*   for (let i = start; i < end; i++) {\n       states[i] = 1;\n     }*/\n\n  let pivotValue = arr[end];\n  let pivotIndex = start;\n  let left = start;\n  let right = end;\n\n  for (let i = start; i < end; i++) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([i, arr[i]]);\n\n    if (arr[i] < pivotValue) {\n\n\n      animations.push([i, pivotIndex]);\n      animations.push([i, pivotIndex]);\n      animations.push([i, arr[pivotIndex]]);\n      /*\n                animations.push([i,i]);\n                animations.push([i,i]);\n                animations.push([i, arr[i]]);\n                animations.push([pivotIndex,pivotIndex]);\n                animations.push([pivotIndex,pivotIndex]);\n                animations.push([pivotIndex, arr[pivotIndex]]);  \n                */\n      swap1(arr, i, pivotIndex++, animations);\n      //pivotIndex++;\n    }\n  }\n\n  swap2(arr, pivotIndex, end, animations);\n\n\n  return pivotIndex;\n\n}\nfunction swap1(arr, a, b, animations) {\n  let temp = arr[a];\n  arr[a] = arr[b];\n  arr[b] = temp;\n  animations.push([a, a]);\n  animations.push([a, a]);\n  animations.push([a, arr[a]]);\n  animations.push([b, b]);\n  animations.push([b, b]);\n  animations.push([b, arr[b]]);\n}\n\n\nfunction swap2(arr, a, b, animations) {\n  let temp = arr[a];\n  arr[a] = arr[b];\n  arr[b] = temp;\n  animations.push([a, a]);\n  animations.push([a, a]);\n  animations.push([a, arr[a]]);\n  animations.push([b, b]);\n  animations.push([b, b]);\n  animations.push([b, arr[b]]);\n}\n\n","import React from 'react';\nimport './SortingVisualizer.css';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/sortingAlgorithms.js';\nimport { quickSortAnimations } from '../sortingAlgorithms/quickSortAlgorithms.js';\nimport { bubbleSort } from '../sortingAlgorithms/bubbleSortAlgorithms.js';\nimport { selectionSortAnimation } from '../sortingAlgorithms/selectionSortAlgorithms.js';\nimport { Nav, Navbar, NavDropdown, Form, FormControl, Button } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\nimport RangeSlider from 'react-bootstrap-range-slider';\n\n//const ANIMATION_SPEED_MS = 3;\n\n//const NUMBER_OF_ARRAY_BARS = /*400*/ 100;\n\nconst PRIMARY_COLOR = 'turquoise';;\n\nconst SECONDARY_COLOR = 'blue';\n\n\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n      ANIMATION_SPEED_MS: 2,\n      NUMBER_OF_ARRAY_BARS: 80,\n      status: false\n    };\n    /*\n        this.handleChange = (e) => {\n          if (e.target.value == true) {\n            this.setState({\n              disabled: false\n            });\n          }\n        }\n        */\n  }\n\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n\n\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < /*window.outerWidth - 1450*/ this.state.NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 650));\n    }\n    this.setState({ array });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      this.state.status = true;\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight, newcolor] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n          if (newcolor) {\n            barOneStyle.backgroundColor = \"orange\";\n          }\n        }, i * this.state.ANIMATION_SPEED_MS);\n      }\n\n    }\n\n  }\n  /*\n      testSortingAlgorithms() {\n          for (let i = 0; i < 100; i++) {\n            const array = [];\n            const length = randomIntFromInterval(1, 1000);\n            for (let i = 0; i < length; i++) {\n              array.push(randomIntFromInterval(-1000, 1000));\n            }\n            const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n            const mergeSortedArray = getMergeSortAnimations(array.slice());\n            console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n          }\n        }\n  */\n  quickSort() {\n    const animations = quickSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.ANIMATION_SPEED_MS);\n      }\n      else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight, newcolor] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n          if (newcolor) {\n            barOneStyle.backgroundColor = \"yellow\";\n          }\n        }, i * this.state.ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n\n  bubbleSort() {\n    const animations = bubbleSort(this.state.array);\n    //   const status = false;\n\n    console.log(\"start\")\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.ANIMATION_SPEED_MS);\n      }\n\n      else {\n\n        setTimeout(() => {\n          const [barOneIdx, newHeight, newcolor] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n          if (newcolor) {\n            barOneStyle.backgroundColor = SECONDARY_COLOR;\n          }\n          console.log(\"end \" + this.state.status)\n          // this.handleChange();\n          this.state.status = true;\n          //this.setState({ status: true });\n        }, i * this.state.ANIMATION_SPEED_MS);\n      }\n\n    }\n\n  }\n\n\n  selectionSort() {\n    console.log(this.state.status);\n    const animations = selectionSortAnimation(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * this.state.ANIMATION_SPEED_MS);\n      }\n      else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight, newcolor] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n\n          if (newcolor) {\n            barOneStyle.backgroundColor = \"red\";\n          }\n        }, i * this.state.ANIMATION_SPEED_MS);\n      }\n    }\n\n  }\n\n\n\n  render() {\n    const { array } = this.state;\n    const { isRunning } = this.props;\n    //  const { status } = this.state;\n    return (\n      <div className=\"Navbar\">\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand onClick={() => window.location.reload()}>Sorting Visualizer</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n\n              <Button variant=\"outline-primary\" onClick={() => { this.mergeSort(); /*this.handleChange()*/ }}>MergeSort</Button>\n              <Button variant=\"outline-primary\" onClick={() => this.quickSort()}>QuickSort</Button>{' '}\n              <Button variant=\"outline-primary\" onClick={() => this.bubbleSort()} >BubbleSort</Button>\n              <Button variant=\"outline-primary\" onClick={() => this.selectionSort()}  >SelectionSort</Button>\n              <Button variant=\"success\" onClick={() => this.resetArray()} > Generate New Array</Button>\n\n            </Nav>\n            <Navbar.Brand>Array Size</Navbar.Brand>\n\n            <RangeSlider\n              value={this.state.NUMBER_OF_ARRAY_BARS}\n              min={30}\n              max={100}\n              step={1}\n              tooltipPlacement='bottom'\n              size='sm'\n              onChange={changeEvent => { this.resetArray(); this.setState({ NUMBER_OF_ARRAY_BARS: changeEvent.target.value }) }}\n            ></RangeSlider>\n\n            <Navbar.Brand>   Animation Speed(ms)</Navbar.Brand>\n\n            <RangeSlider\n              value={this.state.ANIMATION_SPEED_MS}\n              min={0.5}\n              max={10}\n              step={0.5}\n              tooltipPlacement='bottom'\n              size='sm'\n              //onChange={changeEvent => this.setState({ ANIMATION_SPEED_MS: changeEvent.target.valueAsNumber })}\n              //    onChange={() => this.clickHandler()}>SPEED</RangeSlider>\n              onChange={changeEvent => this.setState({ ANIMATION_SPEED_MS: changeEvent.target.value })}>SPEED</RangeSlider>\n\n          </Navbar.Collapse>\n\n        </Navbar>\n\n\n\n        <div className=\"array-container\">\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n              }}>\n            </div>\n          ))}\n\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction randomIntFromInterval(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arrayAreEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) return false;\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n//export default SortingVisualizer;","export function bubbleSort(array) {\n    const animations = [];\n    //const animations2 = [];\n    if (array.length <= 1) return array;\n    bubbleSortHelper(array, animations /*, animations2*/);\n    return animations;//, animations2;\n}\n\n\n\nfunction bubbleSortHelper(array, animations) {\n    for (let i = 0; i < array.length; i++) {\n\n        for (let j = 0; j < array.length - i - 1; j++) {\n\n            animations.push([j, j + 1]);\n            animations.push([j, j + 1]);\n            animations.push([j + 1, array[j + 2]]/*, true]*/);\n\n            //      animations.push([j + 1,array[j + 1]]);\n            //       animations.push([j + 1,j + 1]);\n            // animations.push([j, array[j]]);\n            // animations.push([j + 1, array[j + 1]]);       \n\n\n            if (array[j] > array[j + 1]) {\n                let temp = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = temp;\n                animations.push([j, j]);\n                animations.push([j, j]);\n                animations.push([j, array[j]]);\n                animations.push([j + 1, j + 1]);\n                animations.push([j + 1, j + 1]);\n                animations.push([j + 1, array[j + 1]]/*, true]*/);\n\n\n\n                //      animations.push([j + 1,array[j + 1]]);\n\n                //  animations.push([j,j + 1]);\n\n                //   animations.push([j,array[j]]);\n                //  animations.push([j + 1,array[j + 1]]);\n                /*\n                animations.push([j + 1, array[j + 1]]);\n                animations.push([j + 1, array[j + 1]]);\n                */\n                //animations.push([j,j + 1]);\n                //animations.push([j + 1,j + 1]);\n                /*\n                \n                animations.push([j, array[j]]);\n                animations.push([j, array[j]]);\n                animations.push([j + 1, array[j + 1]]);\n                animations.push([j + 1, array[j + 1]]);\n                */\n            }\n\n        }\n    }\n}","export function selectionSortAnimation(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    selectionSortHelper(array, animations);\n    return animations;\n}\n\nfunction selectionSortHelper(array, animations) {\n\n    for (var i = 0; i < array.length; i++) {\n\n        let min = i; //  storing the index of minimum element\n        animations.push([i, i]);\n        animations.push([i, i]);\n        animations.push([i, array[i]]);\n        for (var j = i + 1; j < array.length; j++) {\n            animations.push([j, j]);\n            animations.push([j, j]);\n            animations.push([j, array[j]]);     //pointer loop through entire bar\n            if (array[min] > array[j]) {\n\n                min = j; // updating the index of minimum element\n                /*        \n                        animations.push([min,min]);\n                        animations.push([min,min]);\n                        animations.push([min, array[min],1]);     //update min element           \n                 */\n            }\n        }\n\n        if (i !== min) {\n            let temp = array[i];\n            array[i] = array[min];\n            array[min] = temp;\n            animations.push([i, i]);\n            animations.push([i, i]);\n            animations.push([i, array[i]/*,true*/]);\n            animations.push([min, min]);\n            animations.push([min, min]);\n            animations.push([min, array[min]]);\n        }\n    }\n    return array;\n}","import React from 'react';\n//import { Link } from 'react-router-dom';\nimport { Nav, Navbar,NavDropdown,Form, FormControl, Button } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport './NavBar.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import {bubbleSort} from '../SortingVisualizer/SortingVisualizer.jsx'\nimport SortingVisualizer from '../SortingVisualizer/SortingVisualizer.jsx';\n\nconst Styles = styled.div`\n  .navbar {\n    background-color: #100;\n  }\n  a, .navbar-brand, .navbar-nav .nav-link {\n    color: #bbb;\n    &:hover {\n      color: red;\n    }\n  }\n`;\n\nexport const NavigationBar = () => (\n  <Styles>\n<Navbar bg=\"light\" expand=\"lg\">\n  <Navbar.Brand href=\"#home\">Sorting Visualizer</Navbar.Brand>\n  <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n  <Navbar.Collapse id=\"basic-navbar-nav\">\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"#home\">MergeSort</Nav.Link>\n      <Nav.Link href=\"#link\">QuickSort</Nav.Link>\n      <Nav.Link href=\"../SortingVisualizer.jsx\">BubbleSort</Nav.Link>\n      <Button variant=\"outline-success\" onClick={()=> SortingVisualizer.mergeSort()}>Success</Button>{' '}\n      <Button onClick={()=> SortingVisualizer.resetArray()}> MergeSort()</Button>\n\n      <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n        <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n        <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\n        <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n        <NavDropdown.Divider />\n        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\n      </NavDropdown>\n    </Nav>\n    <Form inline>\n      <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n      <Button variant=\"outline-success\">Search</Button>\n    </Form>\n  </Navbar.Collapse>\n</Navbar>\n  </Styles >\n)","import React from 'react';\nimport logo from './logo.svg';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport { NavigationBar } from './components/NavigationBar';\n\nimport './App.css';\n\nfunction App() {\n  return (\n/*    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          申花是冠军🏆\n        </a>\n      </header>\n    </div>\n    */\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}